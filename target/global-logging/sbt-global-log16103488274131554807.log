[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\kkobr\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\kkobr\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Oracle Corporation Java 18.0.2.1)
[debug]       Load.loadUnit: plugins took 162.3573ms
[debug]       Load.loadUnit: defsScala took 0.4979ms
[debug] [Loading] Scanning directory C:\Users\kkobr\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\kkobr\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 48.6899 ms
[debug]           Load.resolveProject(global-plugins) took 76.7126ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\kkobr\.sbt\1.0\plugins, plugins: List(<none>))) took 184.4158ms
[debug] [Loading] Done in C:\Users\kkobr\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 233.6062ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5829ms
[debug]     Load.loadUnit(file:/C:/Users/kkobr/.sbt/1.0/plugins/, ...) took 415.0843ms
[debug]   Load.apply: load took 795.0084ms
[debug]   Load.apply: resolveProjects took 15.6119ms
[debug]   Load.apply: finalTransforms took 129.8197ms
[debug]   Load.apply: config.delegates took 18.18ms
[debug]   Load.apply: Def.make(settings)... took 683.1931ms
[debug]   Load.apply: structureIndex took 176.1966ms
[debug]   Load.apply: mkStreams took 2.1377ms
[info] loading global plugins from C:\Users\kkobr\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4450.7942ms
[debug]           Load.loadUnit: plugins took 60.2699ms
[debug]           Load.loadUnit: defsScala took 0.0085ms
[debug] [Loading] Scanning directory C:\Users\kkobr\IdeaProjects\ElevatorContoller\project
[debug]             Load.loadUnit: mkEval took 13.8164ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\kkobr\IdeaProjects\ElevatorContoller\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.6684 ms
[info] loading settings for project elevatorcontoller-build from idea.sbt ...
[debug]               Load.resolveProject(elevatorcontoller-build) took 21.9657ms
[debug]             Load.loadTransitive: finalizeProject(Project(id elevatorcontoller-build, base: C:\Users\kkobr\IdeaProjects\ElevatorContoller\project, plugins: List(<none>))) took 26.627ms
[debug] [Loading] Done in C:\Users\kkobr\IdeaProjects\ElevatorContoller\project, returning: (elevatorcontoller-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4398.5007ms
[debug]           Load.loadUnit: cleanEvalClasses took 12.8476ms
[debug]         Load.loadUnit(file:/C:/Users/kkobr/IdeaProjects/ElevatorContoller/project/, ...) took 4473.6336ms
[debug]       Load.apply: load took 4477.1728ms
[debug]       Load.apply: resolveProjects took 0.1629ms
[debug]       Load.apply: finalTransforms took 24.9448ms
[debug]       Load.apply: config.delegates took 0.7684ms
[debug]       Load.apply: Def.make(settings)... took 151.6072ms
[debug]       Load.apply: structureIndex took 64.6985ms
[debug]       Load.apply: mkStreams took 0.0031ms
[info] loading project definition from C:\Users\kkobr\IdeaProjects\ElevatorContoller\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6793.9706ms
[debug]     Load.loadUnit: defsScala took 0.0064ms
[debug] [Loading] Scanning directory C:\Users\kkobr\IdeaProjects\ElevatorContoller
[debug]       Load.loadUnit: mkEval took 0.5594ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.4744 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 45.5252ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\kkobr\IdeaProjects\ElevatorContoller, plugins: List(<none>))) took 52.8607ms
[debug] [Loading] Done in C:\Users\kkobr\IdeaProjects\ElevatorContoller, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2783.1531ms
[debug]     Load.loadUnit: cleanEvalClasses took 67.6876ms
[debug]   Load.loadUnit(file:/C:/Users/kkobr/IdeaProjects/ElevatorContoller/, ...) took 9646.5196ms
[debug] Load.apply: load took 9650.1511ms
[debug] Load.apply: resolveProjects took 0.1896ms
[debug] Load.apply: finalTransforms took 48.7548ms
[debug] Load.apply: config.delegates took 0.5925ms
[debug] Load.apply: Def.make(settings)... took 96.7799ms
[debug] Load.apply: structureIndex took 48.2853ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to ElevatorContoller (in build file:/C:/Users/kkobr/IdeaProjects/ElevatorContoller/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50682 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50682, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ElevatorContoller (in build file:/C:/Users/kkobr/IdeaProjects/ElevatorContoller/)
[debug] > Exec(idea-shell, None, None)
